## Building documentation

Currently [sphinx](http://www.sphinx-doc.org) and sphinx-apidoc is being used to
documented the code and project, however to get working docs, a small
modification is required to the files outputted by sphinx-apidoc.

This is related to the package restructure undertaken to make the Skyline code
and layout more in line with a normal python package.  Although this seems to
have been achieved, the small hack to the sphinx-apidoc output suggests that
this is not 100% correct.  Further evidence of this is in terms of importing
from settings.py, the path needs to be appended in the code, which really should
not be required.  However, it is working and in the future this should be
figured and fixed.  Perhaps the below edit of the autogenerated .rst files
could be achieved with a sphinx `conf.py` setting, if anyone knows please do
let us know :)

For now...

### Your Python interpretor

Open docs/conf.py and change the following to your python interpretor

```
# The PATH to YOUR python
sys.path.insert(0, os.path.abspath('/opt/python_virtualenv/projects/skyline2711/lib/python2.7/site-packages'))
```

### `.rst` and `.md` wtf?

The documentation is written in both `.md` and `.rst` format, because it can be
thanks to the awesome of [sphinx](http://www.sphinx-doc.org).  The original
Skyline documentation was written in `.md` for github.  The documentation is
being ported over to `.rst` to allow for the full functionality of sphinx
documentation.

### Build

```
APPDIR=<PATH_TO_YOUR_SKYLINE_REPO_DIRECTORY>

cd "$APPDIR/docs"

sphinx-apidoc --force -o "${APPDIR}/docs" "${APPDIR}/skyline" skyline

# Inline edit all apidoc generated .rst files in docs/skyline.*rst
for i in $(find "${APPDIR}/docs" -type f -name "skyline.*rst")
do
  cat "$i" > "${i}.original"
  cat "${i}.original" | sed -e '/package/!s/automodule:: skyline\./automodule:: /g' > "$i"
  rm -f "${i}.original"
done

cd "$APPDIR/docs"
make clean
rm -rf _build/*
make html
for i in $(find "$APPDIR" -type f -name "*.pyc")
do
  rm -f "$i"
done
```

Or something like this...

```
function build_docs() {

  # Arguments:
  # APP_DIR - path to your Skyline dir, e.g.
  # build_docs ~/github/earthgecko/skyline/develop/skyline

  if [ -n "$1" ]; then
    APPDIR=$1
  fi

  if [ -z "$APPDIR" ]; then
    echo "error: could not determine APPDIR - $APPDIR"
    return 1
  fi

  if [ ! -d "$APPDIR/docs" ]; then
    echo "error: directory not found - $APPDIR/docs"
    return 1
  fi
  cd "$APPDIR/docs"
  echo "Building Skyline documentation - in $APPDIR/docs"
  sphinx-apidoc --force -o "${APPDIR}/docs" "${APPDIR}/skyline" skyline

  # Inline edit all apidoc generated .rst files in docs/skyline.*rst
  for i in $(find "${APPDIR}/docs" -type f -name "skyline.*rst")
  do
    cat "$i" > "${i}.org"
    cat "${i}.org" | sed -e '/package/!s/automodule:: skyline\./automodule:: /g' > "$i"
    rm -f "${i}.org"
  done

  cd "$APPDIR/docs"
  make clean
  rm -rf _build/*
  make html
  for i in $(find "$APPDIR" -type f -name "*.pyc")
  do
    rm -f "$i"
  done
  for i in $(find "$APPDIR" -type d -name "__pycache__")
  do
    rm -rf "$i"
  done
  cd
}

# build_docs <app_dir>
```

Building workflow diagrams with UML
###################################

This can be quite handy to make simple diagrams, if not finicky.  A good resource
is the PlantUML.com server is handy for making workflow diagrams, without having
to create and edit SVGs.

The docs/skyline.simplified.workflow.uml rendered by the PlantUML server:
`Simplified Skyline workflow with PlantUML server<http://plantuml.com/plantuml/png/ZLFBJWCn3BpdAwozmmTKLQLo0IIGW0ekY4EwwrAhUQoSNLO5yU-upQEx2A6U4eyzCqwSTDGPXDLkRyWX1BAjeGrX0uFdtSRuGIbTTvvXsLXo53hMXsW-XvlUQWUBXLAryNq3NmhWrMB7L8Stq07INdqhvNo3K5spRhVKOQLKoi750Z8Aiyo0pXSqSv-meL3bw7w_UhmhqTOpVNedST4ItOHEPMyYg79IwexAqweZfDIhDiWTSZnE3hAhTjhiFv4hbNSmlxmiSiiCjhqneaeM0p9XW0rxcomAK_h8-iBLpbj9H2ZxhNtl6itxIkNTnEygW__v5UOPVfPOlsCrwJ5YmcZxi4qqtmS8g8ENkZBpL7XeS3JV-uZ-tM6PUEAUqM8hA6khnqqsVd12pQaHLGRxaD3YSLxrwThEgo_fN7zyhrBCM7jk4kTmSd8nbqyqu5gtRQNYUXhm68Y44N3wA-N2n7FwOMVnvkJr_lh8mazICtWX7E3v5Zv8mvhz8EFv0G00>`__
